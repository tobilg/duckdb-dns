# name: test/sql/cache_performance.test
# description: demonstrate DNS caching performance with repeated lookups
# group: [dns]

require dns

# Set low concurrency to make timing differences more apparent
statement ok
SELECT set_dns_concurrency_limit(10);

# Test 1: Repeated lookups of same domains (should benefit from cache)
query I
WITH domains AS (
  SELECT domain FROM (VALUES 
    ('google.com'), ('github.com'), ('cloudflare.com'), 
    ('stackoverflow.com'), ('wikipedia.org'), ('amazon.com'),
    ('microsoft.com'), ('apple.com'), ('facebook.com'), ('twitter.com')
  ) AS t(domain)
)
SELECT CAST(COUNT(*) = 10 AS INTEGER) FROM (
  SELECT dns_lookup(domain) AS ip FROM domains
) t WHERE ip IS NOT NULL;
----
1

# Test 2: Same domains again (should be cached)
query I
WITH domains AS (
  SELECT domain FROM (VALUES 
    ('google.com'), ('github.com'), ('cloudflare.com'), 
    ('stackoverflow.com'), ('wikipedia.org'), ('amazon.com'),
    ('microsoft.com'), ('apple.com'), ('facebook.com'), ('twitter.com')
  ) AS t(domain)
)
SELECT CAST(COUNT(*) = 10 AS INTEGER) FROM (
  SELECT dns_lookup(domain) AS ip FROM domains
) t WHERE ip IS NOT NULL;
----
1

# Test 3: Third round (should still be cached)
query I
WITH domains AS (
  SELECT domain FROM (VALUES 
    ('google.com'), ('github.com'), ('cloudflare.com'), 
    ('stackoverflow.com'), ('wikipedia.org'), ('amazon.com'),
    ('microsoft.com'), ('apple.com'), ('facebook.com'), ('twitter.com')
  ) AS t(domain)
)
SELECT CAST(COUNT(*) = 10 AS INTEGER) FROM (
  SELECT dns_lookup(domain) AS ip FROM domains
) t WHERE ip IS NOT NULL;
----
1

# Test 4: Test cache clearing by changing DNS config
statement ok
SELECT set_dns_config('google');

# Test 5: Lookup after config change (cache should be cleared)
query I
SELECT CAST(dns_lookup('google.com') IS NOT NULL AS INTEGER);
----
1

# Test 6: Second lookup with new config (should be cached)
query I
SELECT CAST(dns_lookup('google.com') IS NOT NULL AS INTEGER);
----
1

# Test 7: Test reverse DNS caching
query I
SELECT CAST(reverse_dns_lookup('8.8.8.8') = 'dns.google' AS INTEGER);
----
1

# Test 8: Second reverse lookup (should be cached)
query I
SELECT CAST(reverse_dns_lookup('8.8.8.8') = 'dns.google' AS INTEGER);
----
1

# Test 9: Test dns_lookup_all caching
query I
SELECT CAST(len(dns_lookup_all('google.com')) >= 1 AS INTEGER);
----
1

# Test 10: Second dns_lookup_all (should be cached)
query I
SELECT CAST(len(dns_lookup_all('google.com')) >= 1 AS INTEGER);
----
1

# Reset to default
statement ok
SELECT set_dns_config('default');

statement ok
SELECT set_dns_concurrency_limit(250);
